// <auto-generated />
using System;
using System.Drawing;
using HatsuneMiku.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HatsuneMiku.Data.Migrations
{
    [DbContext(typeof(MediaContext))]
    [Migration("20230315043349_ImageEntityOverhaul")]
    partial class ImageEntityOverhaul
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.BraveImageQueryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Layout")
                        .HasColumnType("int");

                    b.Property<int>("License")
                        .HasColumnType("int");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<int>("SafeSearch")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BraveImageQueries");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.BraveImageQueryResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BraveImageQueryId")
                        .HasColumnType("int");

                    b.Property<int>("BraveImageResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BraveImageQueryId");

                    b.HasIndex("BraveImageResultId")
                        .IsUnique();

                    b.ToTable("BraveImageQueryResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.BraveImageResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PageAge")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResizedUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BraveImageResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageQueryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Layout")
                        .HasColumnType("int");

                    b.Property<int>("License")
                        .HasColumnType("int");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SafeSearch")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DuckDuckGoImageQueries");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageQueryResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DuckDuckGoImageQueryId")
                        .HasColumnType("int");

                    b.Property<int>("DuckDuckGoImageResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DuckDuckGoImageQueryId");

                    b.HasIndex("DuckDuckGoImageResultId")
                        .IsUnique();

                    b.ToTable("DuckDuckGoImageQueryResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DuckDuckGoImageResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.GoogleImageQueryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<int>("SafeSearch")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GoogleImageQueries");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.GoogleImageQueryResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoogleImageQueryId")
                        .HasColumnType("int");

                    b.Property<int>("GoogleImageResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoogleImageQueryId");

                    b.HasIndex("GoogleImageResultId")
                        .IsUnique();

                    b.ToTable("GoogleImageQueryResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.GoogleImageResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<KnownColor?>("Color")
                        .HasColumnType("int");

                    b.Property<string>("DisplayUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GoogleImageResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Music.ProducerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Music.SongEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SoundCloudUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("YouTubeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Music.SongProducerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.HasIndex("SongId");

                    b.ToTable("SongProducers");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.BraveImageQueryResultEntity", b =>
                {
                    b.HasOne("HatsuneMiku.Data.Entities.Image.BraveImageQueryEntity", "BraveImageQuery")
                        .WithMany("BraveImageResults")
                        .HasForeignKey("BraveImageQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HatsuneMiku.Data.Entities.Image.BraveImageResultEntity", "BraveImageResult")
                        .WithOne("BraveImageQuery")
                        .HasForeignKey("HatsuneMiku.Data.Entities.Image.BraveImageQueryResultEntity", "BraveImageResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BraveImageQuery");

                    b.Navigation("BraveImageResult");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageQueryResultEntity", b =>
                {
                    b.HasOne("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageQueryEntity", "DuckDuckGoImageQuery")
                        .WithMany("DuckDuckGoImageResults")
                        .HasForeignKey("DuckDuckGoImageQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageResultEntity", "DuckDuckGoImageResult")
                        .WithOne("DuckDuckGoImageQuery")
                        .HasForeignKey("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageQueryResultEntity", "DuckDuckGoImageResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DuckDuckGoImageQuery");

                    b.Navigation("DuckDuckGoImageResult");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.GoogleImageQueryResultEntity", b =>
                {
                    b.HasOne("HatsuneMiku.Data.Entities.Image.GoogleImageQueryEntity", "GoogleImageQuery")
                        .WithMany("GoogleImageResults")
                        .HasForeignKey("GoogleImageQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HatsuneMiku.Data.Entities.Image.GoogleImageResultEntity", "GoogleImageResult")
                        .WithOne("GoogleImageQuery")
                        .HasForeignKey("HatsuneMiku.Data.Entities.Image.GoogleImageQueryResultEntity", "GoogleImageResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoogleImageQuery");

                    b.Navigation("GoogleImageResult");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Music.SongProducerEntity", b =>
                {
                    b.HasOne("HatsuneMiku.Data.Entities.Music.ProducerEntity", "Producer")
                        .WithMany("Songs")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HatsuneMiku.Data.Entities.Music.SongEntity", "Song")
                        .WithMany("Producers")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.BraveImageQueryEntity", b =>
                {
                    b.Navigation("BraveImageResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.BraveImageResultEntity", b =>
                {
                    b.Navigation("BraveImageQuery")
                        .IsRequired();
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageQueryEntity", b =>
                {
                    b.Navigation("DuckDuckGoImageResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.DuckDuckGoImageResultEntity", b =>
                {
                    b.Navigation("DuckDuckGoImageQuery")
                        .IsRequired();
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.GoogleImageQueryEntity", b =>
                {
                    b.Navigation("GoogleImageResults");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Image.GoogleImageResultEntity", b =>
                {
                    b.Navigation("GoogleImageQuery")
                        .IsRequired();
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Music.ProducerEntity", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("HatsuneMiku.Data.Entities.Music.SongEntity", b =>
                {
                    b.Navigation("Producers");
                });
#pragma warning restore 612, 618
        }
    }
}
